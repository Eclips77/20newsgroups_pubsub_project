apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: lkey09211-dev
data:
  # Kafka & Topics
  KAFKA_BOOTSTRAP: "kafka:9092"
  INTERESTING_TOPIC: "interesting"
  NOT_INTERESTING_TOPIC: "not_interesting"

  # Mongo (שני שמות משתנים לתאימות)
  MONGO_URI: "mongodb://mongo:27017"
  MONGO_DB: "newsdb"
  MONGODB_URI: "mongodb://mongo:27017"
  MONGODB_DATABASE: "newsdb"

  # Collections
  COLL_INTERESTING: "interesting_messages"
  COLL_NOT_INTERESTING: "not_interesting_messages"
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: lkey09211-dev
spec:
  clusterIP: None
  ports:
    - name: client
      port: 2181
      targetPort: 2181
  selector:
    app: zookeeper
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
  namespace: lkey09211-dev
spec:
  serviceName: zookeeper
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          image: docker.io/bitnami/zookeeper:3.8
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 2181
              name: client
          env:
            - name: ALLOW_ANONYMOUS_LOGIN
              value: "yes"
          volumeMounts:
            - name: data
              mountPath: /bitnami/zookeeper
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 2Gi
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: lkey09211-dev
spec:
  clusterIP: None
  ports:
    - name: broker
      port: 9092
      targetPort: 9092
  selector:
    app: kafka
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: lkey09211-dev
spec:
  serviceName: kafka
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - name: kafka
          image: docker.io/bitnami/kafka:3.7
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9092
              name: broker
          env:
            - name: KAFKA_CFG_ZOOKEEPER_CONNECT
              value: "zookeeper:2181"
            - name: ALLOW_PLAINTEXT_LISTENER
              value: "yes"
            - name: KAFKA_CFG_LISTENERS
              value: "PLAINTEXT://:9092"
            - name: KAFKA_CFG_ADVERTISED_LISTENERS
              value: "PLAINTEXT://kafka:9092"
            - name: KAFKA_CFG_BROKER_ID
              value: "1"
            - name: KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR
              value: "1"
          volumeMounts:
            - name: data
              mountPath: /bitnami/kafka
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 2Gi
---
apiVersion: v1
kind: Service
metadata:
  name: mongo
  namespace: lkey09211-dev
spec:
  type: ClusterIP
  selector:
    app: mongo
  ports:
    - name: mongo
      port: 27017
      targetPort: 27017
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
  namespace: lkey09211-dev
spec:
  replicas: 1
  selector:
    matchLabels: { app: mongo }
  template:
    metadata:
      labels: { app: mongo }
    spec:
      containers:
        - name: mongo
          image: docker.io/mongo:6
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 27017
          args: ["--bind_ip_all"]
          volumeMounts:
            - name: mongo-data
              mountPath: /data/db
      volumes:
        - name: mongo-data
          persistentVolumeClaim:
            claimName: mongo-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
  namespace: lkey09211-dev
spec:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: publisher-api
  namespace: lkey09211-dev
spec:
  replicas: 1
  selector:
    matchLabels: { app: publisher-api }
  template:
    metadata:
      labels: { app: publisher-api }
    spec:
      containers:
        - name: publisher-api
          image: docker.io/johnlenon003/publisher-image:v4
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8000
          envFrom:
            - configMapRef:
                name: app-config
          env:
            - name: API_PORT
              value: "8000"
---
apiVersion: v1
kind: Service
metadata:
  name: publisher-api
  namespace: lkey09211-dev
spec:
  selector: { app: publisher-api }
  ports:
    - name: http
      port: 8000
      targetPort: 8000
  type: ClusterIP
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: publisher-api
  namespace: lkey09211-dev
spec:
  to:
    kind: Service
    name: publisher-api
  port:
    targetPort: http
  tls:
    termination: edge
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: subscriber-interesting
  namespace: lkey09211-dev
spec:
  replicas: 1
  selector:
    matchLabels: { app: subscriber-interesting }
  template:
    metadata:
      labels: { app: subscriber-interesting }
    spec:
      containers:
        - name: subscriber-interesting
          image: docker.io/johnlenon003/consumer-interesting:v4
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8001
          envFrom:
            - configMapRef:
                name: app-config
          env:
            - name: KAFKA_TOPIC
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: INTERESTING_TOPIC
            - name: MONGODB_COLLECTION
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: COLL_INTERESTING
---
apiVersion: v1
kind: Service
metadata:
  name: subscriber-interesting
  namespace: lkey09211-dev
spec:
  selector: { app: subscriber-interesting }
  ports:
    - name: http
      port: 8001
      targetPort: 8001
  type: ClusterIP
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: subscriber-interesting
  namespace: lkey09211-dev
spec:
  to:
    kind: Service
    name: subscriber-interesting
  port:
    targetPort: http
  tls:
    termination: edge
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: subscriber-not-interesting
  namespace: lkey09211-dev
spec:
  replicas: 1
  selector:
    matchLabels: { app: subscriber-not-interesting }
  template:
    metadata:
      labels: { app: subscriber-not-interesting }
    spec:
      containers:
        - name: subscriber-not-interesting
          image: docker.io/johnlenon003/consumer-non-intresting:v4
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8002
          envFrom:
            - configMapRef:
                name: app-config
          env:
            - name: KAFKA_TOPIC
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: NOT_INTERESTING_TOPIC
            - name: MONGODB_COLLECTION
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: COLL_NOT_INTERESTING
---
apiVersion: v1
kind: Service
metadata:
  name: subscriber-not-interesting
  namespace: lkey09211-dev
spec:
  selector: { app: subscriber-not-interesting }
  ports:
    - name: http
      port: 8002
      targetPort: 8002
  type: ClusterIP
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: subscriber-not-interesting
  namespace: lkey09211-dev
spec:
  to:
    kind: Service
    name: subscriber-not-interesting
  port:
    targetPort: http
  tls:
    termination: edge
